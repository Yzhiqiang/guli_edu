# 微服务项目
## 统一返回结果对象
在实际中可能有多人开发项目，每个人的习惯不一样，前端解析数据非常不方便，所以统一返回数据格式

> @RequestBody   使用json对象接收数据，把json数据分装到对应对象里面，如果使用它，需要将提交方式改成Post方式
> @ResponseBody  返回json对象

##日志
日志记录器（Logger）的行为是分等级的。如下表所示：

分为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL

默认情况下，spring boot从控制台打印出来的日志级别只有INFO及以上级别，可以配置日志级别

##跨域
 通过一个地址去访问另一个地址，这个过程如果有三个地方任何一个不一样
 访问协议   http 、 https
 ip地址   192.168.1.1   172.11.11.11
 端口号   9828、 8001
 > 跨域的解决方式
    * 在后端接口controller上面添加一个注解， @CrossOrigin 
    * 使用网关可以解决
 

##项目第六天
1.添加讲师头像上传功能
（1）阿里云oss存储服务
 *创建bucket，相当于文件夹，可以上传文件
 java操作oss， 需要创建一个id和密钥
2.添加课程分类功能
（1）使用EasyExcel读取excel内容添加数据

3.课程分类列表
（1）树形结构显示

##项目第七天
nginx的功能：
* 请求转发
* 负载均衡
* 动静分离

1.什么是请求转发，类似以前的电话接线员
![img.png](img.png)
2.什么是负载均衡，nginx把请求平均分配到不同的服务器中
3.什么是动静分离，当判断访问的资源是java代码时，就会去请求tomcat服务器，当判断访问的资源是图片，界面时，就会去请求静态服务器

##EasyExcel
使用步骤：
* 引入easyexcel依赖
```xml
<dependency>
    <groupId>com.alibaba</groupId>
    <artifactId>easyexcel</artifactId>
    <version>2.1.1</version>
</dependency>
```


##使用mapper文件编写sql语句报错
> Invalid bound statement (not found): com.yu.edu.mapper.CourseMapper.getPublishCourseInfo
导致错误的原因可能有：
* mapper.xml中的id值和函数名不一致
* maven默认加载机制有问题（.xml文件没有加载进去）,maven加载时，把java文件夹里面的.java类型文件进行
编译，如果是其他类型的文件不会进行加载。

##数据库设计表时，如何表示一对多的的关系， 在“多”的拿一张表中建立外键
在多的那一张表中增加一个字段用来存放一的id


##在存储视频时，在数据库中不存储视频的地址，应该存储视频的id
因为加密后的视频地址不能播放视频，但是通过视频id可以获得视频的凭证和地址，有了视频的凭证和视频的地址就可以播放视频

## 微服务与单体架构区别
（1） 单体架构所有的模块全都耦合在一起（耦合度高），代码量大，维护起来困难
      微服务每个模块就相当于一个单独的项目，代码量明显减少，遇到问题也相对来说比较好解决。
（2） 单体架构所有的模块都共用一个数据库，存储方式比较单一
      微服务每个模块都可以使用不同的存储方式（redis， mysql）
（3） 单体架构所有的模块开发所使用的技术一样
      微服务每个模块都可以使用不同的开发技术，开发模式灵活
> springcloud并不是一种技术， 是很多技术总称，很多框架集合


## 一般一个网站中首页面的访问量是最大的
所以可以使用Redis对首页面的数据进行缓存

##Redis介绍
Redis数据都是缓存在计算机内存中，不同的是，Memcache只能将数据缓存到内存中，
无法自动定期写入硬盘，就表示，一断电或重启，数据就丢失了。所以Memcache的应用场景适用于缓存无需持久化的数据，
而Redis不同的是他会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，实现数据的持久化。
> Redis的特点
* 读写速度快，Redis读取的速度是110000次/s, 写的速度是81000次/s
* 原子，Redis的所有操作都是原子性的，同时Redis还支持事务。
* 支持多种数据类型，string， list, hash, set, zset(有序集合)
* 持久化，集群部署
* 支持过期时间，支持事务，消息订阅
一般来说，把经常查询，不经常修改的，不是特别重要的数据放到redis中作为缓存


## springBoot Redis注解
* @Cacheable   
根据方法对其返回结果进行缓存，下次请求时，如果缓存存在，则直接读取缓存数据返回;
如果缓存不存在，则执行方法，并把返回的结果存入缓存中。一般用在查询方法上。
（参数： key， value）
* @CachePut
使用该注解标志的方法，每次都会执行，并将结果存入指定的缓存中。
其他方法可以直接从响应的缓存中读取缓存数据，而不需要再珐查询数据库。一般用在新增方法上。
（参数： key， value）
* CacheEvict
使用该注解标志的方法，会清空指定的缓存，一般用在更新或者删除方法上。
（参数：key， value， allEntries如果设置为true，则方法调用后会立即清空缓存， beforeInfo如果设置为true，则在方法执行前就会清空缓存）


##连接redis服务可能遇到的问题
（1）关闭防火墙
（2）找到redis配置文件，注释一行配置（bind 127.0.0.1  只允许本地访问，windows访问不到）
（3）如果出现下面错误
Caused by: io.lettuce.core.RledisConnectionException:DENIEDRedis is running in protected mode because protected mode is enabled,
修改protected-mode   yes 改为no


## 登录
单点登录（SSO）（在任何一个模块中登陆了，其他模块也有相应的登录数据不需要再登陆了，解决了session的问题）
单点登陆的三种方式
* session广播机制实现（session，默认过期时间是30min）
登陆的信息放在session， 复制session，在每一个模块中复制session（缺点： 浪费资源）

* cookie+redis（可以设置redis过期时间）
cookie是一个客户端技术
> 实现方式
> 1.登录之后把数据放到两个地方
> redis中，生成一个唯一的随机值（ip，用户id，uid等）作为key， 用户数据作为value
> cookie中把redis里面生成的key值放到cookie
> 2.访问其他模块，发送请求会带着cookie进行发送，获取cookie值（redis中的key）
> 然后到redis中进行查询，如果有数据证明已登录

* token（按照一定的规则生成字符串，字符串可以包含用户信息）（也可以设置过期时间）
>实现方式
> 1.登录之后，按规则生成字符串，把登录之后的用户信息包含到生成字符串里面，把字符串返回
> （1）把字符串通过cookie返回
> （2）把字符串通过地址栏返回
> 2.再去访问项目其他模块，每次访问在地质栏带着生成字符串，在访问的模块中可以获取地址栏中的信息（和ip地址），得到用户信息，如果可以获取到就已经登录了
> 一般采用通用的token的生成规则 JWT， JWT可以生成一个字符串，包含用户信息（jwt头信息 + 有效载荷（用户信息） + 签名哈希（防伪标志））


##Auth2
![img_1.png](img_1.png)

##微信登陆
一：扫描之后会执行本地的callback方法，在callback中获取两个值（state， code临时票据）
二：拿着第一部的code重定向到一个地址，获取（access_token（访问凭证）, openid(每个微信的标识)）
三：拿着第二部的两个值再去请求一个地址就会获取微信扫描人的信息
> 技术点
> httpclient
> json转换工具  （fastjson， gson jackson）



## 项目第16天
![img_2.png](img_2.png)   //每天注册人数     
(select count(*) from ucenter_member uc where DATE(uc.gmt_create)='2019-01-19';)
可以获取改天注册的人数


##项目第17天
1、cannal数据同步工具（将其他数据库中的数据同步到某个数据库）
2、springcloud组件-springcloud-Gateway
3、权限管理模块

cannal应用场景
一个微服务远程调用另一个微服务进行操作该数据库（耦合度高，效率低）
创建一个和远程数据库结构相同的数据库，对本地的数据库进行修改会同步到远程的数据库中
(修改远程库中数据库中的配置)
![img_3.png](img_3.png)
数据同步工具
canal的工作原理就是把自己伪装成MySQL slave，模拟MySQL slave的交互协议向MySQL Mater发送 dump协议，
MySQL mater收到canal发送过来的dump请求， 开始推送binary log给canal，然后canal解析binary log，
再发送到存储目的地，比如MySQL，Kafka，Elastic Search等等。


##网关
客户端所有的请求，先到网关中然后根据请求进行转发，负债均衡 
![img_4.png](img_4.png)


##第18天
![img_5.png](img_5.png)
springsecurity 本质上就是一个过滤器filter，，对多请求的路径进行过滤
(1) 如果是基于Session，那么Spring-security会对cookie里的sessionid进行解析，